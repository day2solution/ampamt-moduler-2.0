package com.ampamt.moduler.security;


import java.io.UnsupportedEncodingException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;

import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;

import org.apache.commons.codec.binary.Base64;



public class AES
{

	
    private static SecretKeySpec secretKey ;
    private static byte[] key ;
    
	private static String decryptedString;
	private static String encryptedString;
 
    
    public static void setKey(String myKey){
    	myKey="6tAyL1hqrHEHruDtsiYS7A==";
   
    	MessageDigest sha = null;
		try {
			key = myKey.getBytes("UTF-8");
			System.out.println(key);
			sha = MessageDigest.getInstance("SHA-1");
			key = sha.digest(key);
	    	key = Arrays.copyOf(key, 16); // use only first 128 bit
	    	System.out.println("key length="+key.length);
	    	System.out.println("key utf 8="+new String(key,"UTF-8"));
		    secretKey = new SecretKeySpec(key, "AES");
		    System.out.println("secretKey="+secretKey);
		    
		} catch (NoSuchAlgorithmException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    	
	    	  
	

    }
    
    public static String getDecryptedString() {
		return decryptedString;
	}

	public static void setDecryptedString(String decryptedString) {
		AES.decryptedString = decryptedString;
	}

    public static String getEncryptedString() {
		return encryptedString;
	}

	public static void setEncryptedString(String encryptedString) {
		AES.encryptedString = encryptedString;
	}

	public static String encrypt(String strToEncrypt)
    {
        try
        {
            Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
        
            cipher.init(Cipher.ENCRYPT_MODE, secretKey);
        
         
            setEncryptedString(Base64.encodeBase64String(cipher.doFinal(strToEncrypt.getBytes("UTF-8"))));
        
        }
        catch (Exception e)
        {
           
            System.out.println("Error while encrypting: "+e.toString());
        }
        return null;

    }

    public static String decrypt(String strToDecrypt)
    {
        try
        {
            Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5PADDING");
           
            cipher.init(Cipher.DECRYPT_MODE, secretKey);
            setDecryptedString(new String(cipher.doFinal(Base64.decodeBase64(strToDecrypt))));
            
        }
        catch (Exception e)
        {
         
            System.out.println("Error while decrypting: "+e.toString());

        }
        return null;
    }


    public static void main(String args[]) throws NoSuchAlgorithmException
    {
//    	AES.passwordHashGenerator();
 
                final String strToEncrypt = "111111";
                final String strPssword = "6tAyL1hqrHEHruDtsiYS7A==";//key=6 text=ampamt
                AES.setKey(strPssword);
               
                AES.encrypt(strToEncrypt.trim());
                
                System.out.println("String to Encrypt: " + strToEncrypt); 
                System.out.println("Encrypted: " + AES.getEncryptedString());
           
                final String strToDecrypt =  "e/D/+H6nS3fUzzsGf7qciQ==";
                AES.decrypt(strToDecrypt.trim());
               
                System.out.println("String To Decrypt : " + strToDecrypt);
                System.out.println("Decrypted : " + AES.getDecryptedString());
                System.out.println("dat=AMPAMT"+new SimpleDateFormat("HHmmSSS").format(Calendar.getInstance().getTime()));
    	
//    	String data="data:application/pdf;base64,JVBERi0xLjMKJf////8KOSAwIG9iago8PAovVHlwZSAvRXh0R1N0YXRlCi9jYSAxCi9DQSAxCj4+CmVuZG9iago4IDAgb2JqCjw8Ci9UeXBlIC9QYWdlCi9QYXJlbnQgMSAwIFIKL01lZGlhQm94IFswIDAgNTk1LjI4IDg0MS44OV0KL0NvbnRlbnRzIDYgMCBSCi9SZXNvdXJjZXMgNyAwIFIKPj4KZW5kb2JqCjcgMCBvYmoKPDwKL1Byb2NTZXQgWy9QREYgL1RleHQgL0ltYWdlQiAvSW1hZ2VDIC9JbWFnZUldCi9FeHRHU3RhdGUgPDwKL0dzMSA5IDAgUgo";
//    	String replace=data.replaceFirst("data:application/pdf;base64,", "");
//    	System.out.println("replace="+replace);
                
                AES.decryptHashedPassword();
    }
    public static void passwordHashGenerator() {
    	final String strToEncrypt = "ampamt@client";
        final String strPssword = String.valueOf(strToEncrypt.length());//key=6 text=ampamt
        System.out.println(strPssword);
        AES.setKey(strPssword);
       
        AES.encrypt(strToEncrypt.trim());
        System.out.println("Encrypted salt: " + AES.getEncryptedString());
    }
    
    public static void decryptHashedPassword() throws NoSuchAlgorithmException {
    	String hashedPass="$6$nqoDqdzYoSFVuEhK$MWb7WQ3GBeChMj5uVfmKHveKmOFGdTA0lqoTVWDq.hliNQnzHTT5A0RYuNFUvSabmr.783BQ05qwv2bzLeJj2.";
    	MessageDigest messageDigest = MessageDigest.getInstance("SHA-512");
    	byte[] hash = messageDigest.digest( hashedPass.getBytes() );

    	System.out.println("Result: " + new String(hash));
    }
}